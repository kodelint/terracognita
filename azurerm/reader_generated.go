package azurerm

// Code generated by 'go generate'; DO NOT EDIT
import (
	"context"

	"github.com/pkg/errors"

	"github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2019-07-01/compute"
	"github.com/Azure/azure-sdk-for-go/services/network/mgmt/2019-06-01/network"
)

// ListVirtualMachines returns a list of VirtualMachines within a subscription and a resource group
func (ar *AzureReader) ListVirtualMachines(ctx context.Context) ([]compute.VirtualMachine, error) {
	client := compute.NewVirtualMachinesClient(ar.config.SubscriptionID)
	client.Authorizer = ar.authorizer

	output, err := client.List(ctx, ar.GetResourceGroupName())
	if err != nil {
		return nil, errors.Wrap(err, "unable to list compute VirtualMachine from Azure APIs")
	}
	resources := make([]compute.VirtualMachine, 0)
	for output.NotDone() {

		for _, res := range output.Values() {
			resources = append(resources, res)
		}

		if err := output.Next(); err != nil {
			break
		}
	}
	return resources, nil
}

// ListVirtualNetworks returns a list of VirtualNetworks within a subscription and a resource group
func (ar *AzureReader) ListVirtualNetworks(ctx context.Context) ([]network.VirtualNetwork, error) {
	client := network.NewVirtualNetworksClient(ar.config.SubscriptionID)
	client.Authorizer = ar.authorizer

	output, err := client.List(ctx, ar.GetResourceGroupName())
	if err != nil {
		return nil, errors.Wrap(err, "unable to list network VirtualNetwork from Azure APIs")
	}
	resources := make([]network.VirtualNetwork, 0)
	for output.NotDone() {

		for _, res := range output.Values() {
			resources = append(resources, res)
		}

		if err := output.Next(); err != nil {
			break
		}
	}
	return resources, nil
}
